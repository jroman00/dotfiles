#!/usr/bin/env bash

# Connect to a Docker Compose service
function dcconnect() {
  IFS=$'\n' read -d '' -r -a services < <(docker-compose config --services | sort)

  numServices=${#services[@]}

  if [[ ${#services[@]} -eq 0 ]]; then
    echo 'ERROR: No services found'

    return 1
  fi

  # If a service name was provided, attempt to connect to it
  if [[ -n "$1" ]]; then
    # If the service is invalid (i.e. not in the list of services available)
    if [[ ! " ${services[@]} " =~ " $1 " ]]; then
      echo "ERROR: Service not found (service=$1)"

      return 1
    fi

    echo "Connecting to $1..."
    docker-compose exec "$1" sh -c "if [ -x /bin/bash ]; then /bin/bash; else /bin/sh; fi"

    return 0
  fi

  # If only one services exists, connect to it
  if [[ ${#services[@]} -eq 1 ]]; then
    echo "Connecting to ${services[0]}..."
    docker-compose exec "${services[0]}" sh -c "if [ -x /bin/bash ]; then /bin/bash; else /bin/sh; fi"

    return 0
  fi

  echo "Multiple services found (num: $numServices)"

  selectedNum=0
  while [[ $selectedNum -le 0 ]] || [[ $selectedNum -gt $numServices ]]; do
    num=1
    for i in "${services[@]}"; do
        echo "$num: $i"
        ((num++))
    done

    read -rp 'Please select the number of the service you wish to connect to ("q" to quit): ' selectedNum

    if [[ $selectedNum == 'q' ]]; then
      return 0
    fi
  done

  echo "Connecting to ${services[$selectedNum - 1]]}..."
  docker-compose exec "${services[$selectedNum - 1]}" sh -c "if [ -x /bin/bash ]; then /bin/bash; else /bin/sh; fi"
}

# Download composer
function download_composer() {
  EXPECTED_SIGNATURE="$(curl https://composer.github.io/installer.sig)"
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  ACTUAL_SIGNATURE="$(php -r "echo hash_file('SHA384', 'composer-setup.php');")"

  if [[ $EXPECTED_SIGNATURE != "$ACTUAL_SIGNATURE" ]]; then
      >&2 echo 'ERROR: Invalid installer signature'
      rm composer-setup.php
      return 1
  fi

  php composer-setup.php --quiet
  RESULT=$?
  rm composer-setup.php
  return $RESULT
}

# Git: Prepend current branch name to commit message
function gcb() {
  current_branch=$(git_branch_name)

  if [[ $current_branch == "development" ]] || [[ $current_branch == "master" ]] || [[ $current_branch == "staging" ]]; then
    echo "Cannot commit message with branch name $current_branch"
    return 1
  fi

  commit_branch=$(echo "$current_branch" | sed -E 's/^(bug|feature|hotfix|release|revert|story|task)\///')

  git commit -m "$commit_branch: $1"
}

# Git: Determine current branch
function git_branch_name() {
  git rev-parse --abbrev-ref HEAD
}

# Git: Count committed lines per author
function git_line_count() {
  if [[ -z "$1" ]]; then
    files=$(git ls-files .)
  else
    files=$(git ls-files "$1")
  fi

  echo "$files" | xargs -n1 git blame -wM --line-porcelain | sed -n 's/^author //p' | sort -f | uniq -ic | sort -nr
}

# Git: Update all immediate subdirectories
function git_update_all() {
  echo "Pulling in latest changes for all repositories..."

  # Find all git repositories and update it to the main latest revision
  for i in $(find . -maxdepth 2 -mindepth 2 -name ".git" | cut -c 3-); do
    echo ""
    echo "Updating $i..."

    (
      cd "$(dirname "$i")" || exit

      gfp
    )
  done

  echo ""
  echo "Complete!"
}

# Git: Clean current branch after it's been merged
function gprune() {
  active_branch=$(git_branch_name)
  development_exists=$(git rev-parse --verify --quiet development)
  main_exists=$(git rev-parse --verify --quiet main)
  staging_exists=$(git rev-parse --verify --quiet staging)

  if [[ $active_branch == "development" ]] || [[ $active_branch == "main" ]] || [[ $active_branch == "master" ]] || [[ $active_branch == "staging" ]]; then
    echo "Cannot prune $active_branch"
    return 1
  fi

  force=false
  trunk="master"

  if [[ $development_exists ]]; then
    trunk="development"
  elif [[ $main_exists ]]; then
    trunk="main"
  elif [[ $staging_exists ]]; then
    trunk="staging"
  fi

  for i in "$@" ; do
    case "$i" in
      ( -f | --force ) force=true; shift;;
      ( * ) trunk=$1; shift;;
    esac
  done

  if [[ $force == true ]]; then
    delete_flag="D"
  else
    delete_flag="d"
  fi

  if [[ $active_branch == "$trunk" ]]; then
    echo "Cannot prune into self"
    return 1
  fi

  git stash && git checkout "$trunk" && git pull origin "$trunk" && git branch -${delete_flag} "$active_branch" && git fetch --prune
}

# Git: Push to origin
function gpush() {
  force=false

  for i in "$@" ; do
    case "$i" in
      ( -f | --force ) force=true; shift;;
    esac
  done

  if [[ $force == true ]]; then
    force_flag="--force-with-lease"
  else
    force_flag=""
  fi

  git push origin $(git_branch_name) $force_flag
}

# Git: Rebase current branch
function grebase() {
  active_branch=$(git rev-parse --abbrev-ref HEAD)
  development_exists=$(git rev-parse --verify --quiet development)
  main_exists=$(git rev-parse --verify --quiet main)
  staging_exists=$(git rev-parse --verify --quiet staging)

  if [[ $active_branch == "development" ]] || [[ $active_branch == "main" ]] || [[ $active_branch == "master" ]] || [[ $active_branch == "staging" ]]; then
    echo "Cannot rebase $active_branch"
    return 1
  fi

  trunk="master"

  if [[ $development_exists ]]; then
    trunk="development"
  elif [[ $main_exists ]]; then
    trunk="main"
  elif [[ $staging_exists ]]; then
    trunk="staging"
  fi

  for i in "$@" ; do
    case "$i" in
      ( * ) trunk=$1; shift;;
    esac
  done

  if [[ $active_branch == "$trunk" ]]; then
    echo "Cannot rebase into self"
    return 1
  fi

  git stash && git checkout "$trunk" && git fetch --prune && git pull origin "$trunk" && git checkout - && git rebase "$trunk"
}

# Git: Enter interactive mode to squash the number of commits specified
function gsquash() {
  if [[ -z "$1" ]]; then
    echo "Usage: squash <num_commits>"
    return 1
  fi

  git stash && git rebase -i "HEAD~$1"
}

# Install linux ISO to the selected device
function install_linux() {
  if [[ $# -eq 0 ]]; then
    echo 'Input file required'
    return 1
  fi

  if [[ ! -f $1 ]]; then
    echo "Input file not found"
    return 1
  fi

  lsblk -o NAME,SIZE,LABEL

  echo ""
  read -rp "Which device would you like install to? " input

  device="/dev/$input"

  if [[ ! -b $device ]]; then
    echo "Invalid device"
    return 1
  fi

  date

  if hash pv 2>/dev/null; then
    size=$(stat --print="%s" "$1")
    sudo bash -c "dd if=$1 | pv -s $size | dd of=$device bs=4M"
  else
    echo "pv not found. Running with no progress monitor..."
    sudo dd if=$1 of=$device bs=4M
  fi

  date
}

# Execute whatever command + arguments are passed in every 5 seconds
function loop5() {
  while true; do "$@" && echo ""; sleep 5; done;
}

# Reset all directory and file permissions to 0775 and 0664, respectively, in the current directory
function reset_chmod() {
  find . -type d -print0 | xargs -0 chmod 0775
  find . -type f -print0 | xargs -0 chmod 0664
}

# Touch all files under the current directory
function touch_files() {
  find . -type f -print0 | xargs -0 touch
}

# Wipe selected device by overwriting with random data
function wipe_device() {
  lsblk -o NAME,SIZE,LABEL

  echo ""
  read -rp "Which device would you like to wipe? " input

  device="/dev/$input"

  if [[ ! -b $device ]]; then
    echo "Invalid device"
    return 1
  fi

  date

  if hash pv 2>/dev/null; then
    size=$(sudo blockdev --getsize64 "$device")
    sudo bash -c "dd if=/dev/urandom | pv -s $size | dd of=$device bs=4M"
  else
    echo "pv not found. Running with no progress monitor..."
    sudo dd if=/dev/urandom of=$device bs=4M
  fi

  date
}

function db_migrate_clockwork_web() {
  RAILS_ENV=development bundle exec rake db:migrate
  RAILS_ENV=test bundle exec rake db:migrate
}
